#ifndef _HDMITX_RPC_H_
#define _HDMITX_RPC_H_

#define S_OK        0x10000000

typedef long HRESULT;

typedef struct RPCRES_LONG {
	HRESULT result;
	long data;
}RPCRES_LONG;

typedef struct { 
	unsigned long  info;
	RPCRES_LONG retval;
	unsigned long ret;
} RPC_DEFAULT_INPUT_T;

//AUDIO_RPC_ToAgent_AOUT_HDMI_Set_0
struct AUDIO_HDMI_SET {
     u_int HDMI_Frequency;
};
typedef struct AUDIO_HDMI_SET AUDIO_HDMI_SET;

//AUDIO_RPC_ToAgent_HDMI_Mute_0
struct AUDIO_HDMI_MUTE_INFO {
     long instanceID;
     char hdmi_mute;
};
typedef struct AUDIO_HDMI_MUTE_INFO AUDIO_HDMI_MUTE_INFO;

//AUDIO_RPC_ToAgent_HDMI_OUT_VSDB_0
struct AUDIO_HDMI_OUT_VSDB_DATA {
     long HDMI_VSDB_delay;
};
typedef struct AUDIO_HDMI_OUT_VSDB_DATA AUDIO_HDMI_OUT_VSDB_DATA;

//AUDIO_RPC_ToAgent_HDMI_INFO_0
struct HDMI_INFO {
     long video_type;
};
typedef struct HDMI_INFO HDMI_INFO;



typedef enum
{
    ENUM_KERNEL_RPC_CREATE_AGENT,
    ENUM_KERNEL_RPC_INIT_RINGBUF,
    ENUM_KERNEL_RPC_PRIVATEINFO,
    ENUM_KERNEL_RPC_RUN,
    ENUM_KERNEL_RPC_PAUSE,
    ENUM_KERNEL_RPC_SWITCH_FOCUS,
    ENUM_KERNEL_RPC_MALLOC_ADDR,
    ENUM_KERNEL_RPC_VOLUME_CONTROL,
    ENUM_KERNEL_RPC_FLUSH,
    ENUM_KERNEL_RPC_CONNECT,
    ENUM_KERNEL_RPC_SETREFCLOCK,
    ENUM_KERNEL_RPC_DAC_I2S_CONFIG,
    ENUM_KERNEL_RPC_DAC_SPDIF_CONFIG,
    ENUM_KERNEL_RPC_HDMI_OUT_EDID,
    ENUM_KERNEL_RPC_HDMI_OUT_EDID2,
    ENUM_KERNEL_RPC_HDMI_SET,
    ENUM_KERNEL_RPC_HDMI_MUTE,
    ENUM_KERNEL_RPC_ASK_DBG_MEM_ADDR,
    ENUM_KERNEL_RPC_DESTROY,
    ENUM_KERNEL_RPC_STOP,
    ENUM_KERNEL_RPC_CHECK_READY,   // check if Audio get memory pool from AP
    ENUM_KERNEL_RPC_GET_MUTE_N_VOLUME,   // get mute and volume level
    ENUM_KERNEL_RPC_EOS,
    ENUM_KERNEL_RPC_ADC0_CONFIG,
    ENUM_KERNEL_RPC_ADC1_CONFIG,
    ENUM_KERNEL_RPC_ADC2_CONFIG,
#if defined(AUDIO_TV_PLATFORM)
    ENUM_KERNEL_RPC_BBADC_CONFIG,
    ENUM_KERNEL_RPC_I2SI_CONFIG,
    ENUM_KERNEL_RPC_SPDIFI_CONFIG,
#endif // AUDIO_TV_PLATFORM
    ENUM_KERNEL_RPC_HDMI_OUT_VSDB,
    ENUM_VIDEO_KERNEL_RPC_CONFIG_TV_SYSTEM,
    ENUM_VIDEO_KERNEL_RPC_CONFIG_HDMI_INFO_FRAME,
	ENUM_VIDEO_KERNEL_RPC_QUERY_DISPLAY_WIN,
} ENUM_AUDIO_KERNEL_RPC_CMD;

// Video

enum VO_HDMI_MODE {
     VO_DVI_ON = 0,
     VO_HDMI_ON = 1,
     VO_HDMI_OFF = 2,
};
typedef enum VO_HDMI_MODE VO_HDMI_MODE;
 
enum VO_HDMI_AUDIO_SAMPLE_FREQ {
     VO_HDMI_AUDIO_NULL = 0,
     VO_HDMI_AUDIO_32K = 1,
     VO_HDMI_AUDIO_44_1K = 2,
     VO_HDMI_AUDIO_48K = 3,
     VO_HDMI_AUDIO_88_2K = 4,
     VO_HDMI_AUDIO_96K = 5,
     VO_HDMI_AUDIO_176_4K = 6,
     VO_HDMI_AUDIO_192K = 7,
};
typedef enum VO_HDMI_AUDIO_SAMPLE_FREQ VO_HDMI_AUDIO_SAMPLE_FREQ;


struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME {
     enum VO_HDMI_MODE hdmiMode;
     enum VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
     u_char audioChannelCount;
     u_char dataByte1;
     u_char dataByte2;
     u_char dataByte3;
     u_char dataByte4;
     u_char dataByte5;
     u_int dataInt0;
     long reserved1;
     long reserved2;
     long reserved3;
     long reserved4;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME;



enum VO_INTERFACE_TYPE {
     VO_ANALOG_AND_DIGITAL = 0,
     VO_ANALOG_ONLY = 1,
     VO_DIGITAL_ONLY = 2,
 };
typedef enum VO_INTERFACE_TYPE VO_INTERFACE_TYPE;

enum VO_PEDESTAL_TYPE {
     VO_PEDESTAL_TYPE_300_700_ON = 0,
     VO_PEDESTAL_TYPE_300_700_OFF = 1,
     VO_PEDESTAL_TYPE_286_714_ON = 2,
     VO_PEDESTAL_TYPE_286_714_OFF = 3,
};
typedef enum VO_PEDESTAL_TYPE VO_PEDESTAL_TYPE;

enum VO_STANDARD {
     VO_STANDARD_NTSC_M = 0,
     VO_STANDARD_NTSC_J = 1,
     VO_STANDARD_NTSC_443 = 2,
     VO_STANDARD_PAL_B = 3,
     VO_STANDARD_PAL_D = 4,
     VO_STANDARD_PAL_G = 5,
     VO_STANDARD_PAL_H = 6,
     VO_STANDARD_PAL_I = 7,
     VO_STANDARD_PAL_N = 8,
     VO_STANDARD_PAL_NC = 9,
     VO_STANDARD_PAL_M = 10,
     VO_STANDARD_PAL_60 = 11,
     VO_STANDARD_SECAM = 12,
     VO_STANDARD_HDTV_720P_60 = 13,
     VO_STANDARD_HDTV_720P_50 = 14,
     VO_STANDARD_HDTV_720P_30 = 15,
     VO_STANDARD_HDTV_720P_25 = 16,
     VO_STANDARD_HDTV_720P_24 = 17,
     VO_STANDARD_HDTV_1080I_60 = 18,
     VO_STANDARD_HDTV_1080I_50 = 19,
     VO_STANDARD_HDTV_1080P_30 = 20,
     VO_STANDARD_HDTV_1080P_25 = 21,
     VO_STANDARD_HDTV_1080P_24 = 22,
     VO_STANDARD_VGA = 23,
     VO_STANDARD_SVGA = 24,
     VO_STANDARD_HDTV_1080P_60 = 25,
     VO_STANDARD_HDTV_1080P_50 = 26,
     VO_STANDARD_HDTV_1080I_59 = 27,
     VO_STANDARD_HDTV_720P_59 = 28,
     VO_STANDARD_HDTV_1080P_23 = 29,
     VO_STANDARD_HDTV_1080P_59 = 30,
     VO_STANDARD_VGA_1024_768_60 = 31,
     VO_STANDARD_VGA_1280_800_60 = 32,
     VO_STANDARD_VGA_1366_768_60 = 33,
     VO_STANDARD_VGA_1280_1024_60 = 34,
     VO_STANDARD_VGA_800_600_60 = 35,
     VO_STANDARD_HDTV_1080P_60_3D = 36,
     VO_STANDARD_HDTV_1080P_50_3D = 37,
     VO_STANDARD_HDTV_1080P_30_3D = 38,
     VO_STANDARD_HDTV_1080P_24_3D = 39,
     VO_STANDARD_HDTV_720P_60_3D = 40,
     VO_STANDARD_HDTV_720P_50_3D = 41,
     VO_STANDARD_HDTV_720P_30_3D = 42,
     VO_STANDARD_HDTV_720P_24_3D = 43,
     VO_STANDARD_HDTV_720P_59_3D = 44,
     VO_STANDARD_HDTV_1080I_60_3D = 45,
     VO_STANDARD_HDTV_1080I_59_3D = 46,
     VO_STANDARD_HDTV_1080I_50_3D = 47,
     VO_STANDARD_HDTV_1080P_23_3D = 48,
};
typedef enum VO_STANDARD VO_STANDARD;

struct VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD {
     enum VO_STANDARD standard;
     u_char enProg;
     u_char enDIF;
     u_char enCompRGB;
     enum VO_PEDESTAL_TYPE pedType;
     u_int dataInt0;
     u_int dataInt1;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD;


struct VIDEO_RPC_VOUT_CONFIG_TV_SYSTEM {
    enum VO_INTERFACE_TYPE interfaceType;
    struct VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD videoInfo;
    struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME hdmiInfo;
 };
typedef struct VIDEO_RPC_VOUT_CONFIG_TV_SYSTEM VIDEO_RPC_VOUT_CONFIG_TV_SYSTEM;


struct AUDIO_HDMI_OUT_EDID_DATA2 {
	long Version;
	long HDMI_output_enable;
	long EDID_DATA_addr;
};
typedef struct AUDIO_HDMI_OUT_EDID_DATA2 AUDIO_HDMI_OUT_EDID_DATA2;


enum VO_VIDEO_PLANE {
    VO_VIDEO_PLANE_V1 = 0,
    VO_VIDEO_PLANE_V2 = 1,
    VO_VIDEO_PLANE_SUB1 = 2,
    VO_VIDEO_PLANE_OSD1 = 3,
    VO_VIDEO_PLANE_OSD2 = 4,
    VO_VIDEO_PLANE_WIN1 = 5,
    VO_VIDEO_PLANE_WIN2 = 6,
    VO_VIDEO_PLANE_WIN3 = 7,
    VO_VIDEO_PLANE_WIN4 = 8,
    VO_VIDEO_PLANE_WIN5 = 9,
    VO_VIDEO_PLANE_NONE = 255,
};
typedef enum VO_VIDEO_PLANE VO_VIDEO_PLANE;

enum VO_OSD_COLOR_FORMAT {
    VO_OSD_COLOR_FORMAT_2BIT = 0,
    VO_OSD_COLOR_FORMAT_4BIT = 1,
    VO_OSD_COLOR_FORMAT_8BIT = 2,
    VO_OSD_COLOR_FORMAT_RGB332 = 3,
    VO_OSD_COLOR_FORMAT_RGB565 = 4,
    VO_OSD_COLOR_FORMAT_ARGB1555 = 5,
    VO_OSD_COLOR_FORMAT_ARGB4444 = 6,
    VO_OSD_COLOR_FORMAT_ARGB8888 = 7,
    VO_OSD_COLOR_FORMAT_Reserved0 = 8,
    VO_OSD_COLOR_FORMAT_Reserved1 = 9,
    VO_OSD_COLOR_FORMAT_Reserved2 = 10,
    VO_OSD_COLOR_FORMAT_YCBCRA4444 = 11,
    VO_OSD_COLOR_FORMAT_YCBCRA8888 = 12,
    VO_OSD_COLOR_FORMAT_RGBA5551 = 13,
    VO_OSD_COLOR_FORMAT_RGBA4444 = 14,
    VO_OSD_COLOR_FORMAT_RGBA8888 = 15,
    VO_OSD_COLOR_FORMAT_420 = 16,
    VO_OSD_COLOR_FORMAT_422 = 17,
    VO_OSD_COLOR_FORMAT_RGB323 = 18,
    VO_OSD_COLOR_FORMAT_RGB233 = 19,
    VO_OSD_COLOR_FORMAT_RGB556 = 20,
    VO_OSD_COLOR_FORMAT_RGB655 = 21,
    VO_OSD_COLOR_FORMAT_RGB888 = 22,
    VO_OSD_COLOR_FORMAT_RGB565_LITTLE = 36,
    VO_OSD_COLOR_FORMAT_ARGB1555_LITTLE = 37,
    VO_OSD_COLOR_FORMAT_ARGB4444_LITTLE = 38,
    VO_OSD_COLOR_FORMAT_ARGB8888_LITTLE = 39,
    VO_OSD_COLOR_FORMAT_YCBCRA4444_LITTLE = 43,
    VO_OSD_COLOR_FORMAT_YCBCRA8888_LITTLE = 44,
    VO_OSD_COLOR_FORMAT_RGBA5551_LITTLE = 45,
    VO_OSD_COLOR_FORMAT_RGBA4444_LITTLE = 46,
    VO_OSD_COLOR_FORMAT_RGBA8888_LITTLE = 47,
    VO_OSD_COLOR_FORMAT_RGB556_LITTLE = 52,
    VO_OSD_COLOR_FORMAT_RGB655_LITTLE = 53,
    VO_OSD_COLOR_FORMAT_RGB888_LITTLE = 54,
};
typedef enum VO_OSD_COLOR_FORMAT VO_OSD_COLOR_FORMAT;
 
enum VO_OSD_RGB_ORDER {
     VO_OSD_COLOR_RGB = 0,
     VO_OSD_COLOR_BGR = 1,
     VO_OSD_COLOR_GRB = 2,
     VO_OSD_COLOR_GBR = 3,
     VO_OSD_COLOR_RBG = 4,
     VO_OSD_COLOR_BRG = 5,
 };
typedef enum VO_OSD_RGB_ORDER VO_OSD_RGB_ORDER;

enum VO_3D_MODE_TYPE {
    VO_2D_MODE = 0,
    VO_3D_SIDE_BY_SIDE_HALF = 1,
    VO_3D_TOP_AND_BOTTOM = 2,
    VO_3D_FRAME_PACKING = 3,
};
typedef enum VO_3D_MODE_TYPE VO_3D_MODE_TYPE;


struct VIDEO_RPC_VOUT_QUERY_DISP_WIN_IN {
 enum VO_VIDEO_PLANE plane;
};

struct VO_RECTANGLE {
    short x;
    short y;
    u_short width;
    u_short height;
};
typedef struct VO_RECTANGLE VO_RECTANGLE;

struct VO_SIZE {
    u_short w;
    u_short h;
};
typedef struct VO_SIZE VO_SIZE;

struct VIDEO_RPC_VOUT_QUERY_DISP_WIN_OUT {
	short result;
	enum VO_VIDEO_PLANE plane;
	u_short numWin;
	u_short zOrder;
	struct VO_RECTANGLE configWin;
	struct VO_RECTANGLE contentWin;
	short deintMode;
	u_short pitch;
	enum VO_OSD_COLOR_FORMAT colorType;
	enum VO_OSD_RGB_ORDER RGBOrder;
	enum VO_3D_MODE_TYPE format3D;
	struct VO_SIZE mix1_size;
	enum VO_STANDARD standard;
	u_char enProg;
	u_char reserved1;
	u_short reserved2;
	long reserved3;
};


#endif

