typedef enum
{
    ENUM_KERNEL_RPC_CREATE_AGENT,
    ENUM_KERNEL_RPC_INIT_RINGBUF,
    ENUM_KERNEL_RPC_PRIVATEINFO,
    ENUM_KERNEL_RPC_RUN,
    ENUM_KERNEL_RPC_PAUSE,
    ENUM_KERNEL_RPC_SWITCH_FOCUS,
    ENUM_KERNEL_RPC_MALLOC_ADDR,
    ENUM_KERNEL_RPC_VOLUME_CONTROL,
    ENUM_KERNEL_RPC_FLUSH,
    ENUM_KERNEL_RPC_CONNECT,
    ENUM_KERNEL_RPC_SETREFCLOCK,
    ENUM_KERNEL_RPC_DAC_I2S_CONFIG,
    ENUM_KERNEL_RPC_DAC_SPDIF_CONFIG,
    ENUM_KERNEL_RPC_HDMI_OUT_EDID,
    ENUM_KERNEL_RPC_HDMI_OUT_EDID2,
    ENUM_KERNEL_RPC_HDMI_SET,
    ENUM_KERNEL_RPC_HDMI_MUTE,
    ENUM_KERNEL_RPC_ASK_DBG_MEM_ADDR,
    ENUM_KERNEL_RPC_DESTROY,
    ENUM_KERNEL_RPC_STOP,
    ENUM_KERNEL_RPC_CHECK_READY,   // check if Audio get memory pool from AP
    ENUM_KERNEL_RPC_GET_MUTE_N_VOLUME,   // get mute and volume level
    ENUM_KERNEL_RPC_EOS,
    ENUM_KERNEL_RPC_ADC0_CONFIG,
    ENUM_KERNEL_RPC_ADC1_CONFIG,
    ENUM_KERNEL_RPC_ADC2_CONFIG,
    ENUM_KERNEL_RPC_HDMI_OUT_VSDB,
    ENUM_VIDEO_KERNEL_RPC_CONFIG_TV_SYSTEM,
    ENUM_VIDEO_KERNEL_RPC_CONFIG_HDMI_INFO_FRAME,
    ENUM_VIDEO_KERNEL_RPC_QUERY_DISPLAY_WIN,
    ENUM_VIDEO_KERNEL_RPC_PP_INIT_PIN,
    ENUM_KERNEL_RPC_INIT_RINGBUF_AO,
    ENUM_VIDEO_KERNEL_RPC_VOUT_EDID_DATA,
    ENUM_KERNEL_RPC_AUDIO_POWER_SET,
    ENUM_VIDEO_KERNEL_RPC_VOUT_VDAC_SET,
    ENUM_VIDEO_KERNEL_RPC_QUERY_CONFIG_TV_SYSTEM,
    ENUM_KERNEL_RPC_AUDIO_CONFIG,
    ENUM_KERNEL_RPC_AIO_PRIVATEINFO,
    ENUM_KERNEL_RPC_QUERY_FW_DEBUG_INFO,
    ENUM_KERNEL_RPC_HDMI_RX_LATENCY_MEM
} ENUM_AUDIO_KERNEL_RPC_CMD;

enum AUDIO_ENUM_AIO_PRIVAETINFO {
	ENUM_PRIVATEINFO_AIO_AO_INTERFACE_SWITCH_CONTROL = 0,
	ENUM_PRIVATEINFO_AIO_AI_INTERFACE_SWITCH_CONTROL = 1,
	ENUM_PRIVATEINFO_AIO_ALSA_DESTROY_AI_FLOW = 2,
	ENUM_PRIVATEINFO_AIO_AI_NONPCM_WRITE_BACK_BS = 3,
	ENUM_PRIVATEINFO_AIO_HDMIRX_LATENCY_MEM = 4,
	ENUM_PRIVATEINFO_AIO_AI_LOOPBACK_AO = 5,
	ENUM_PRIVATEINFO_AIO_AI_LOOPBACK_HDMITX = 6,
	ENUM_PRIVATEINFO_AIO_AI_LOOPBACK_DAC = 7,
	ENUM_PRIVATEINFO_AIO_AI_ADC_ANALOG = 8,
	ENUM_PRIVATEINFO_AIO_GENERATE_AIN_RCLK = 9,
};
typedef enum AUDIO_ENUM_AIO_PRIVAETINFO AUDIO_ENUM_AIO_PRIVAETINFO;


struct AUDIO_RPC_AIO_PRIVATEINFO_PARAMETERS {
    int instanceID;
    enum AUDIO_ENUM_AIO_PRIVAETINFO type;
    int privateInfo[16];
};
typedef struct AUDIO_RPC_AIO_PRIVATEINFO_PARAMETERS AUDIO_RPC_AIO_PRIVATEINFO_PARAMETERS;


typedef struct {
    long instanceID;
    long privateInfo[16];
}AUDIO_RPC_PRIVATEINFO_RETURNVAL;

#define S_OK        0x10000000
#define CONVERT_FOR_AVCPU(x)        ((unsigned int)(x) | 0xA0000000)
#define AUDIO_ION_FLAG              (ION_FLAG_NONCACHED |ION_FLAG_SCPUACC | ION_FLAG_ACPUACC)



